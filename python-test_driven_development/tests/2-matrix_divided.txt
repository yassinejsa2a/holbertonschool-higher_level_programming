The ``2-matrix_divided`` module
==============================

Using ``matrix_divided`` 
----------------------

Import function from module:
    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Test basic division:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> matrix_divided(matrix, 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

Test one element matrix:
    >>> matrix = [[2]]
    >>> matrix_divided(matrix, 2)
    [[1.0]]

Test very large numbers:
    >>> matrix = [[1000000, 2000000], [3000000, 4000000]]
    >>> matrix_divided(matrix, 1000000)
    [[1.0, 2.0], [3.0, 4.0]]

Test floating point numbers:
	>>> matrix = [[1.5, 2.5, 3.5], [4.5, 5.5, 6.5]]
	>>> matrix_divided(matrix, 3)
	[[0.5, 0.83, 1.17], [1.5, 1.83, 2.17]]

Test missing arguments:
	>>> matrix = [[1, 2, 3], [4, 5, 6]]
	>>> matrix_divided(matrix)
	Traceback (most recent call last):
	TypeError: matrix_divided() missing 1 required positional argument: 'div'

Test too many arguments:
	>>> matrix = [[1, 2, 3], [4, 5, 6]]
	>>> matrix_divided(matrix, 3, 4)
	Traceback (most recent call last):
	TypeError: matrix_divided() takes 2 positional arguments but 3 were given

Test invalid matrix:
	>>> matrix = [[1, 2, 3], [4, 5]]
	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
	TypeError: Each row of the matrix must have the same size

Test invalid division:
	>>> matrix = [[1, 2, 3], [4, 5, 6]]
	>>> matrix_divided(matrix, 0)
	Traceback (most recent call last):
	ZeroDivisionError: division by zero

Test invalid matrix type:
	>>> matrix = [1, 2, 3]
	>>> matrix_divided(matrix, 3)
	Traceback (most recent call last):
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Test invalid matrix type:
	>>> matrix = [[1, 2, 3], [4, 5, 6]]
	>>> matrix_divided(matrix, "School")
	Traceback (most recent call last):
	TypeError: div must be a number

Test floating point numbers:
    >>> matrix = [[1.5, 2.8, 3.2], [4.1, 5.6, 6.9]]
    >>> print(matrix_divided(matrix, 2))
    [[0.75, 1.4, 1.6], [2.05, 2.8, 3.45]]

Test large numbers:
    >>> matrix = [[1000, 2000, 3000], [4000, 5000, 6000]]
    >>> print(matrix_divided(matrix, 1000))
    [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

Test negative numbers:
    >>> matrix = [[-1, -2, -3], [-4, -5, -6]]
    >>> print(matrix_divided(matrix, 2))
    [[-0.5, -1.0, -1.5], [-2.0, -2.5, -3.0]]

Test mix of integers and floats:
    >>> matrix = [[1, 2.5, 3], [4.8, 5, 6.7]]
    >>> print(matrix_divided(matrix, 2))
    [[0.5, 1.25, 1.5], [2.4, 2.5, 3.35]]

Test small divisor:
    >>> matrix = [[1, 2, 3], [4, 5, 6]]
    >>> print(matrix_divided(matrix, 0.1))
    [[10.0, 20.0, 30.0], [40.0, 50.0, 60.0]]

Test None as matrix:
    >>> print(matrix_divided(None, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Test one-row matrix:
    >>> matrix = [[1, 2, 3]]
    >>> print(matrix_divided(matrix, 2))
    [[0.5, 1.0, 1.5]]

Test one-column matrix:
    >>> matrix = [[1], [2], [3]]
    >>> print(matrix_divided(matrix, 2))
    [[0.5], [1.0], [1.5]]

Test matrix with NaN:
    >>> matrix = [[float('nan'), 2], [3, 4]]
    >>> result = matrix_divided(matrix, 2)
    >>> for row in result:
    ...     for item in row:
    ...         if item != item:  # Check for NaN
    ...             print("NaN", end=" ")
    ...         else:
    ...             print(item, end=" ")
    NaN 1.0 1.5 2.0 

Test matrix with infinity:
    >>> matrix = [[float('inf'), 2], [3, 4]]
    >>> matrix_divided(matrix, 2)
    [[inf, 1.0], [1.5, 2.0]]

Test matrix with negative infinity:
	>>> matrix = [[float('-inf'), 2], [3, 4]]
	>>> matrix_divided(matrix, 2)
	[[-inf, 1.0], [1.5, 2.0]]

Test division by infinity:
	>>> matrix = [[1, 2], [3, 4]]
	>>> matrix_divided(matrix, float('inf'))
	[[0.0, 0.0], [0.0, 0.0]]
